// ================ –î–∞–Ω–Ω—ã–µ –∫–∞–∑–∏–Ω–æ ================
const CASINOS = [
    {
        "name": "–í–∞–≤–∞–¥–∞", 
        "desc": "–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –ª–µ–≥–µ–Ω–¥—ã —Ç–æ–∂–µ –ø—Ä–æ–∏–≥—Ä—ã–≤–∞—é—Ç.", 
        "promo": "VAVADA777", 
        "categories": ["–¢–æ–ø", "–®—É—Ç–∫–∞"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=Vavada", 
        "url": "#"
    },
    {
        "name": "–°—Ç–µ–π–∫", 
        "desc": "–°–æ—á–Ω—ã–π —Å–∞–π—Ç, –ø—Ä–æ–∂–∞—Ä–µ–Ω–Ω—ã–π –Ω–∞ 100% –Ω–µ—É–¥–∞—á–∏.", 
        "promo": "MEAT100", 
        "categories": ["–¢–æ–ø"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=Stake", 
        "url": "#"
    },
    {
        "name": "–í–æ–¥–∫–∞", 
        "desc": "–ü–µ–π, –∏–≥—Ä–∞–π, –ø—Ä–æ–∏–≥—Ä—ã–≤–∞–π ‚Äî –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ!", 
        "promo": "SHOT2025", 
        "categories": ["–®—É—Ç–∫–∞"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=Vodka", 
        "url": "#"
    },
    {
        "name": "–ë—É–π", 
        "desc": "–ö–æ—Ä–∞–±–ª—å —Ñ–æ—Ä—Ç—É–Ω—ã, –∫–æ—Ç–æ—Ä—ã–π —É–∂–µ —É—Ç–æ–Ω—É–ª. –ù–æ –≤–µ—Å–µ–ª–æ!", 
        "promo": "BOOM1", 
        "categories": ["–¢–æ–ø"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=Boooi", 
        "url": "#"
    },
    {
        "name": "–ü–ª–µ–π–§–æ—Ä—Ç—É–Ω–∞", 
        "desc": "–§–æ—Ä—Ç—É–Ω–∞ –∏–≥—Ä–∞–µ—Ç, –Ω–æ –Ω–µ —Å —Ç–æ–±–æ–π.", 
        "promo": "FORT999", 
        "categories": ["–ù–æ–≤—ã–µ"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=PlayFortuna", 
        "url": "#"
    },
    {
        "name": "–î–∂–æ–π–ö–∞–∑–∏–Ω–æ", 
        "desc": "–†–∞–¥–æ—Å—Ç—å –∑–∞–∫–∞–Ω—á–∏–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∑–∞—Ö–æ–¥–∏—à—å –Ω–∞ —Å–∞–π—Ç.", 
        "promo": "JOY0", 
        "categories": ["–¢–æ–ø"], 
        "img": "https://placehold.co/600x300/333/d4af37?text=JoyCasino", 
        "url": "#"
    },
    {
        "name": "–°–ö–ê–ú", 
        "desc": "–ù–∏–∫–∞–∫–æ–≥–æ —Å–∫–∞–º–∞! –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –º–µ–º—ã!", 
        "promo": "", 
        "categories": ["–§–µ–π–∫"], 
        "img": "https://placehold.co/600x300/333/ff6961?text=SCAM", 
        "url": "#", 
        "fake": true
    }
];

// ================ DOM refs ================
const casinoList = document.getElementById('casino-list');
const searchInput = document.getElementById('searchInput');
const categoryButtons = document.getElementById('categoryButtons');
const bybitModal = document.getElementById('bybit-instruction');
const openBybitBtn = document.getElementById('openBybit');
const closeBybitBtn = document.getElementById('closeBybit');

// ================ –î–µ–Ω–µ–∂–Ω—ã–π –¥–æ–∂–¥—å ================
function createMoneyRain() {
    const moneyRain = document.createElement('div');
    moneyRain.className = 'money-rain';
    document.body.appendChild(moneyRain);

    const moneySymbols = ['üí∞', 'üíµ', 'üí∂', 'üí∑', 'üí¥', 'üíé', 'ü™ô', 'üí∏'];
    
    function createMoneyNote() {
        if (document.hidden) return;
        
        const money = document.createElement('div');
        money.className = 'money-note';
        money.textContent = moneySymbols[Math.floor(Math.random() * moneySymbols.length)];
        money.style.left = Math.random() * 100 + 'vw';
        money.style.fontSize = (Math.random() * 20 + 20) + 'px';
        money.style.animationDuration = (Math.random() * 3 + 5) + 's';
        money.style.opacity = Math.random() * 0.7 + 0.3;
        
        moneyRain.appendChild(money);
        
        // –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏
        setTimeout(() => {
            if (money.parentNode === moneyRain) {
                moneyRain.removeChild(money);
            }
        }, 8000);
    }
    
    // –°–æ–∑–¥–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–µ –¥–µ–Ω—å–≥–∏
    for (let i = 0; i < 15; i++) {
        setTimeout(createMoneyNote, i * 300);
    }
    
    // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Å–æ–∑–¥–∞–≤–∞—Ç—å –¥–µ–Ω—å–≥–∏ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    setInterval(createMoneyNote, 500);
}

// ================== Render casinos ==================
function buildCategories() {
    const cats = new Set();
    CASINOS.forEach(c => (c.categories||[]).forEach(cat => cats.add(cat)));
    categoryButtons.innerHTML = '';
    
    const allBtn = document.createElement('button'); 
    allBtn.className = 'cat-btn active'; 
    allBtn.textContent = '–í—Å–µ'; 
    allBtn.dataset.cat = 'all'; 
    categoryButtons.appendChild(allBtn);
    
    [...cats].forEach(cat => {
        const b = document.createElement('button'); 
        b.className = 'cat-btn'; 
        b.textContent = cat; 
        b.dataset.cat = cat; 
        categoryButtons.appendChild(b);
    });
    
    categoryButtons.addEventListener('click', e => {
        const btn = e.target.closest('button'); 
        if (!btn) return;
        categoryButtons.querySelectorAll('button').forEach(x => x.classList.remove('active'));
        btn.classList.add('active');
        applyFilters();
    });
}

function createCard(c) {
    const card = document.createElement('div'); 
    card.className = 'casino-card';
    if (c.fake) card.classList.add('scam');
    card.dataset.categories = (c.categories||[]).join(' ');
    
    card.innerHTML = `
        <img src="${c.img}" alt="${c.name}" loading="lazy">
        <div class="casino-info">
            <h3>${c.name}</h3>
            <p>${c.desc}</p>
            ${c.promo ? `<div class="promo" data-code="${c.promo}">${c.promo}</div>` : `<div style="height:46px"></div>`}
            <button class="play-button">${c.name === '–°–ö–ê–ú' || c.fake ? '–≤ –∏–≥—Ä—É' : '–≤ –∏–≥—Ä—É'}</button>
        </div>
    `;
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    const promoEl = card.querySelector('.promo');
    if (promoEl) {
        promoEl.addEventListener('click', async (ev) => {
            const code = promoEl.dataset.code || promoEl.textContent;
            try { 
                await navigator.clipboard.writeText(code); 
                promoEl.classList.add('copied'); 
                promoEl.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'; 
                setTimeout(() => { 
                    promoEl.classList.remove('copied'); 
                    promoEl.textContent = code; 
                }, 1500); 
            } catch(e) {
                // Fallback –¥–ª—è —Å—Ç–∞—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–æ–≤
                const textArea = document.createElement('textarea');
                textArea.value = code;
                document.body.appendChild(textArea);
                textArea.select();
                document.execCommand('copy');
                document.body.removeChild(textArea);
                promoEl.classList.add('copied'); 
                promoEl.textContent = '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!'; 
                setTimeout(() => { 
                    promoEl.classList.remove('copied'); 
                    promoEl.textContent = code; 
                }, 1500);
            }
            ev.stopPropagation();
        });
    }
    
    const btn = card.querySelector('.play-button');
    if (c.fake || c.name.toLowerCase().includes('—Å–∫–∞–º')) {
        btn.addEventListener('click', () => {
            card.classList.add('fall');
            setTimeout(() => card.remove(), 1200);
        });
    } else {
        btn.addEventListener('click', async () => {
            if (c.promo) { 
                try { 
                    await navigator.clipboard.writeText(c.promo);
                } catch(e) {
                    const textArea = document.createElement('textarea');
                    textArea.value = c.promo;
                    document.body.appendChild(textArea);
                    textArea.select();
                    document.execCommand('copy');
                    document.body.removeChild(textArea);
                } 
            }
            if (c.url && c.url !== '#') {
                window.open(c.url, '_blank', 'noopener,noreferrer');
            }
        });
    }
    return card;
}

function renderCasinos(list = CASINOS) {
    casinoList.innerHTML = '';
    list.forEach(c => casinoList.appendChild(createCard(c)));
}

// ================ Filters & Search ================
function variantsOf(q) {
    q = (q||'').toLowerCase();
    if (!q) return [''];
    const map = {
        '–π':'q','—Ü':'w','—É':'e','–∫':'r','–µ':'t','–Ω':'y','–≥':'u','—à':'i','—â':'o','–∑':'p',
        '—Ö':'[','—ä':']','—Ñ':'a','—ã':'s','–≤':'d','–∞':'f','–ø':'g','—Ä':'h','–æ':'j','–ª':'k',
        '–¥':'l','–∂':';','—ç':"'",'—è':'z','—á':'x','—Å':'c','–º':'v','–∏':'b','—Ç':'n','—å':'m',
        '–±':',','—é':'.'
    };
    const enToRu = Object.fromEntries(Object.entries(map).map(([k,v]) => [v,k]));
    const ruEn = q.split('').map(c => map[c] || c).join('');
    const enRu = q.split('').map(c => enToRu[c] || c).join('');
    return [q, ruEn, enRu];
}

function applyFilters() {
    const activeBtn = categoryButtons.querySelector('.active');
    const cat = activeBtn ? activeBtn.dataset.cat : 'all';
    const q = searchInput.value.trim().toLowerCase();
    const vars = variantsOf(q);
    
    Array.from(casinoList.children).forEach(card => {
        const title = (card.querySelector('h3') || {}).textContent.toLowerCase();
        const desc = (card.querySelector('p') || {}).textContent.toLowerCase();
        const promo = (card.querySelector('.promo') || {}).dataset.code || '';
        const hay = (title + ' ' + desc + ' ' + promo).toLowerCase();
        const matchQ = !q || vars.some(v => v && hay.includes(v));
        const cats = (card.dataset.categories || '').toLowerCase().split(/\s+/);
        const matchCat = (cat === 'all') || cats.includes(cat.toLowerCase());
        card.style.display = (matchQ && matchCat) ? 'block' : 'none';
    });
}

// ================ Modal Management ================
function openBybitModal() {
    bybitModal.classList.remove('hidden');
    document.body.style.overflow = 'hidden';
}

function closeBybitModal() {
    bybitModal.classList.add('hidden');
    document.body.style.overflow = '';
}

// ================ Event Listeners ================
searchInput.addEventListener('input', applyFilters);
openBybitBtn.addEventListener('click', openBybitModal);
closeBybitBtn.addEventListener('click', closeBybitModal);

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –µ—ë –æ–±–ª–∞—Å—Ç–∏
bybitModal.addEventListener('click', (e) => {
    if (e.target === bybitModal) {
        closeBybitModal();
    }
});

// –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –ø–æ ESC
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape' && !bybitModal.classList.contains('hidden')) {
        closeBybitModal();
    }
});


// ================ –≠—Ñ—Ñ–µ–∫—Ç —à–ª–µ–π—Ñ–∞ –∑–∞ –∫—É—Ä—Å–æ—Ä–æ–º ================
function createCursorTrail() {
    const trail = document.createElement('div');
    trail.className = 'cursor-trail';
    document.body.appendChild(trail);

    const glow = document.createElement('div');
    glow.className = 'cursor-glow';
    document.body.appendChild(glow);

    let mouseX = 0;
    let mouseY = 0;
    let trailTimeout;

    const coinSymbols = ['ü™ô', 'üí∞', 'üíé', '‚≠ê', '‚ú¶', '‚ô†', '‚ô•', '‚ô¶', '‚ô£'];
    
    function updateGlow(x, y) {
        glow.style.left = x + 'px';
        glow.style.top = y + 'px';
    }

    function createTrailElement(x, y) {
        // –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –º–µ–∂–¥—É –º–æ–Ω–µ—Ç–æ–π –∏ —á–∞—Å—Ç–∏—Ü–µ–π
        if (Math.random() > 0.3) {
            // –°–æ–∑–¥–∞–µ–º –º–æ–Ω–µ—Ç—É
            const coin = document.createElement('div');
            coin.className = 'cursor-coin';
            coin.textContent = coinSymbols[Math.floor(Math.random() * coinSymbols.length)];
            coin.style.left = x + 'px';
            coin.style.top = y + 'px';
            coin.style.fontSize = (Math.random() * 8 + 14) + 'px';
            
            trail.appendChild(coin);
            
            setTimeout(() => {
                if (coin.parentNode === trail) {
                    trail.removeChild(coin);
                }
            }, 1500);
        } else {
            // –°–æ–∑–¥–∞–µ–º —á–∞—Å—Ç–∏—Ü—É
            const particle = document.createElement('div');
            particle.className = 'cursor-particle';
            particle.style.left = x + 'px';
            particle.style.top = y + 'px';
            particle.style.background = `hsl(${40 + Math.random() * 10}, 70%, 55%)`;
            particle.style.width = (Math.random() * 4 + 4) + 'px';
            particle.style.height = particle.style.width;
            
            trail.appendChild(particle);
            
            setTimeout(() => {
                if (particle.parentNode === trail) {
                    trail.removeChild(particle);
                }
            }, 1000);
        }
    }

    function handleMouseMove(e) {
        mouseX = e.clientX;
        mouseY = e.clientY;
        
        updateGlow(mouseX, mouseY);
        trail.style.opacity = '1';
        
        clearTimeout(trailTimeout);
        trailTimeout = setTimeout(() => {
            trail.style.opacity = '0';
        }, 100);
    }

    function handleMouseLeave() {
        trail.style.opacity = '0';
        glow.style.opacity = '0';
    }

    function handleMouseEnter() {
        trail.style.opacity = '1';
        glow.style.opacity = '1';
    }

    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã —à–ª–µ–π—Ñ–∞ —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º
    let trailInterval = setInterval(() => {
        if (trail.style.opacity === '1') {
            createTrailElement(mouseX, mouseY);
        }
    }, 50);

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
    document.addEventListener('mousemove', handleMouseMove);
    document.addEventListener('mouseleave', handleMouseLeave);
    document.addEventListener('mouseenter', handleMouseEnter);

    // –ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–∏ –∫–ª–∏–∫–µ - –±–æ–ª—å—à–µ —á–∞—Å—Ç–∏—Ü
    document.addEventListener('click', (e) => {
        for (let i = 0; i < 8; i++) {
            setTimeout(() => {
                createTrailElement(
                    e.clientX + (Math.random() - 0.5) * 30,
                    e.clientY + (Math.random() - 0.5) * 30
                );
            }, i * 50);
        }
    });

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –∞–Ω–∏–º–∞—Ü–∏–∏ –∫–æ–≥–¥–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞ –Ω–µ –≤–∏–¥–Ω–∞
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            clearInterval(trailInterval);
        } else {
            trailInterval = setInterval(() => {
                if (trail.style.opacity === '1') {
                    createTrailElement(mouseX, mouseY);
                }
            }, 50);
        }
    });
}






// ================ Init ================
function init() {
    buildCategories();
    renderCasinos();
    createMoneyRain();
    createCursorTrail(); // –î–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å—Ç—Ä–æ–∫—É
    
    // –§–æ–∫—É—Å –Ω–∞ –ø–æ–∏—Å–∫
    setTimeout(() => { 
        try { 
            searchInput.focus(); 
        } catch(e) {} 
    }, 100);
}
// –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ DOM
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
} else {
    init();
}
